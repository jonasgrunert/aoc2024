<!DOCTYPE html>
<html>
  <head>
    <title>Advent of Code 2023 Solutions in Typescript</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <script
      async
      defer
      data-website-id="{{#UMAMI_KEY}}"
      src="{{#UMAMI_URL}}"
    ></script>
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/water.css@2/out/dark.css"
    />
    <link
      rel="stylesheet"
      href="https://unpkg.com/prismjs@1.29.0/themes/prism-tomorrow.min.css"
    />
    <link
      rel="stylesheet"
      href="https://unpkg.com/prismjs@1.29.0/plugins/line-numbers/prism-line-numbers.min.css"
    />
    <style>
      .line-numbers .line-numbers-rows {
        color: var(--text-bright);
      }
      pre > code {
        overflow-x: initial;
        padding: 0 !important;
      }
      pre {
        background: var(--background) !important;
        border-radius: 4px;
      }
      code {
        background: var(--background) !important;
      }
      .task {
        display: flex;
        justify-content: space-between;
      }
      .task > div {
        flex: 1;
        padding: 0 0.5em;
      }
      #exec {
        height: 5em;
        width: 10em;
        display: flex;
        align-items: center;
        justify-content: center;
      }
      #error:not(:empty) {
        background-color: var(--highlight);
        color: var(--background);
        margin: 1em;
        padding: 10px;
        border-radius: 6px;
      }
      footer {
        display: flex;
        align-items: center;
        justify-content: center;
      }
      .loader {
        background: var(--text-bright);
        -webkit-animation: load1 1s infinite ease-in-out;
        animation: load1 1s infinite ease-in-out;
        width: 1em;
        height: 4em;
        text-indent: -9999em;
        position: relative;
        margin: 2px;
        font-size: 8px;
        -webkit-transform: translateZ(0);
        -ms-transform: translateZ(0);
        transform: translateZ(0);
        -webkit-animation-delay: -0.16s;
        animation-delay: -0.16s;
      }
      .loader:nth-of-type(0) {
        -webkit-animation-delay: 0ms;
        animation-delay: 0ms;
      }
      .loader:nth-of-type(1) {
        -webkit-animation-delay: 160ms;
        animation-delay: 160ms;
      }
      .loader:nth-of-type(2) {
        -webkit-animation-delay: 320ms;
        animation-delay: 320ms;
      }
      @-webkit-keyframes load1 {
        0%,
        80%,
        100% {
          box-shadow: 0 0;
        }
        40% {
          box-shadow: 0 -2em;
        }
      }
      @keyframes load1 {
        0%,
        80%,
        100% {
          box-shadow: 0 0;
          transform: translateY(0);
        }
        40% {
          box-shadow: 0 -2em;
          transform: translateY(1em);
        }
      }
    </style>
  </head>
  <body>
    <form id="form">
      <div class="task">
        <div>
          <label for="task">Task</label>
          <select name="task" id="task">
            {{#options}}
          </select>
        </div>
        <button id="exec" type="submit">Execute</button>
      </div>
      <div class="task">
        <div>
          <label for="input">Input</label>
          <textarea name="input" id="input" rows="16"></textarea>
        </div>
        <div>
          <label for="output-1">Result Task 1</label>
          <textarea name="output-1" id="output-1" readonly></textarea>
          <label for="output-2">Result Task 2</label>
          <textarea name="output-2" id="output-2" readonly></textarea>
        </div>
      </div>
    </form>
    <div id="error"></div>
    <pre class="line-numbers language-ts"><code id="code"></code></pre>
    <footer>
      <p>
        Made with ‚ù§ in Berlin by
        <a href="https://jonas.grunert.berlin">Jonas Grunert</a> in 2023.
        <a href="https://github.com/jonasgrunert/adventofcode2023">Source</a>
      </p>
    </footer>
    <script>
      function fetchCode(name) {
        fetch(`/${name}.ts`)
          .then((r) => r.text())
          .then((t) => {
            document.getElementById("code").innerHTML = t.trimEnd();
            Prism.highlightAll();
          });
        fetch(`/data/${name}_test.txt`)
          .then((r) => r.text())
          .then((t) => {
            document.getElementById("input").value = t;
          });
      }
      const params = new URLSearchParams(window.location.search);
      for (const [id, value] of params) {
        document.getElementById(id).value = value;
      }
      fetchCode(params.get("task") ?? "01");
    </script>
    <script type="module">
      const form = document.getElementById("form");
      document.getElementById("task").addEventListener("change", (evt) => {
        fetchCode(evt.target.value);
      });
      form.addEventListener("change", (evt) => {
        evt.preventDefault();
        evt.stopPropagation();
        document.getElementById("error").innerHTML = "";
        window.history.pushState(
          {},
          "",
          `?${new URLSearchParams(new FormData(evt.currentTarget)).toString()}`,
        );
      });
      const worker = new Worker("worker.js", { type: "module" });
      worker.onmessage = (message) => {
        if (message.data.success) {
          const part = message.data.name.slice(-1);
          document.getElementById(`output-${part}`).value = message.data.result;
          document.querySelector(
            `[for=output-${part}`,
          ).innerHTML = `Result Task ${part} (${message.data.time}ms)`;
          if(part == 2){
          const btn = document.getElementById("exec");
          btn.removeAttribute("disabled");
          btn.innerHTML = `Execute`;
}
        } else {
          displayError(
            `We encountered an error while executing the worker: ${message.data.error.message}`,
          );
        }
      };
      function displayError(message) {
        document.getElementById("error").innerHTML = message;
        const btn = document.getElementById("exec");
        btn.removeAttribute("disabled");
        btn.innerHTML = `Execute`;
      }
      worker.onerror = (event) =>
        displayError(
          `We encountered an error with the worker: ${error.message}`,
        );
      worker.onmessageerror = (event) =>
        displayError(
          `We encountered an error with the message between us: ${error.message}`,
        );
      form.addEventListener("submit", (evt) => {
        evt.preventDefault();
        const btn = document.getElementById("exec");
        btn.setAttribute("disabled", "");
        btn.innerHTML = `<div class="loader"></div><div class="loader"></div><div class="loader"></div>`;
        const data = new FormData(evt.currentTarget);
        worker.postMessage({
          task: data.get("task"),
          input: data.get("input"),
        });
      });
    </script>
    <script src="https://unpkg.com/prismjs@1.29.0/components/prism-core.min.js"></script>
    <script src="https://unpkg.com/prismjs@1.29.0/plugins/line-numbers/prism-line-numbers.min.js"></script>
    <script src="https://unpkg.com/prismjs@1.29.0/components/prism-clike.min.js"></script>
    <script src="https://unpkg.com/prismjs@1.29.0/components/prism-javascript.min.js"></script>
    <script src="https://unpkg.com/prismjs@1.29.0/components/prism-typescript.min.js"></script>
  </body>
</html>
